{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Semester from '../components/Semester.jsx';\nimport Button from '@material-ui/core/Button';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport Modal from '@material-ui/core/Modal';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withTranslation } from 'react-i18next';\nimport domtoimage from 'dom-to-image';\nexport function generateImage(semesterNum) {\n  var img = new Image();\n  var node = document.getElementById(`semester-${semesterNum} clone`);\n  node.style.display = \"block\";\n  domtoimage.toPng(node).then(function (dataUrl) {\n    img.src = dataUrl;\n    img.id = 'results-image';\n    img.setAttribute('alt', `Semester ${semesterNum} results`);\n  }).catch(function (error) {\n    alert(\"An error occurred during the generation of the image.\");\n    console.error('oopss', error);\n  });\n  return img;\n}\nexport default class DownloadImage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleOpen\", () => {\n      this.image = generateImage(this.semesterNum);\n      const $this = this; // preserve the *this* object.\n\n      this.image.onload = function () {\n        // *this* here will be undefined ?(arrow function) so use $this\n        // console.log($this.image);\n        $this.setState({\n          open: true\n        });\n      };\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      var node = document.getElementById(`semester-${this.semesterNum} clone`);\n      node.style.display = \"none\";\n      this.setState({\n        open: false\n      });\n    });\n\n    this.image = null;\n    this.semesterNum = props.semesterNum;\n    this.state = {\n      open: false\n    };\n  }\n\n  render() {\n    const image = this.image,\n          {\n      t\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: () => this.handleOpen(),\n        endIcon: /*#__PURE__*/_jsx(GetAppIcon, {}),\n        children: t('Image')\n      }), /*#__PURE__*/_jsx(Modal, {\n        open: this.state.open,\n        onClose: () => this.handleClose(),\n        \"aria-label\": `Semester ${this.semesterNum} results modal image`,\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'row-reverse',\n          height: '90%'\n        },\n        children: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(IconButton, {\n            \"aria-label\": \"Close modal\",\n            onClick: () => this.handleClose(),\n            component: \"span\",\n            style: {\n              alignSelf: 'start',\n              color: 'ghostwhite',\n              marginLeft: '3rem'\n            },\n            children: /*#__PURE__*/_jsx(CloseIcon, {})\n          }), image !== null ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              src: image.src,\n              alt: image.alt,\n              id: image.id,\n              style: {\n                width: '60%'\n              }\n            }), /*#__PURE__*/_jsx(\"a\", {\n              href: image.src,\n              download: `Semester {this.semesterNum} results.png`,\n              style: {\n                alignSelf: 'end',\n                position: 'relative',\n                bottom: '1rem',\n                right: '2rem'\n              },\n              children: /*#__PURE__*/_jsx(Button, {\n                color: \"secondary\",\n                variant: \"contained\",\n                onClick: () => this.handleClose(),\n                disableElevation: true // style={{color: 'darkblue'}}\n                ,\n                children: t('Download')\n              })\n            })]\n          }) : null]\n        })\n      })]\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}