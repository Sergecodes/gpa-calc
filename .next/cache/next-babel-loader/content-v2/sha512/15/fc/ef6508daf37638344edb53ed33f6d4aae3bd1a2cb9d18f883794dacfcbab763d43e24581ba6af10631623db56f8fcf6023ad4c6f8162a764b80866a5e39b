{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Suspense } from 'react';\nimport LanguageSelector from \"../components/LanguageSelector.jsx\";\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Button from '@material-ui/core/Button';\nimport Heading from '../components/Heading.jsx';\nimport SemesterList from '../components/SemesterList.jsx';\nimport FinalResult from '../components/FinalResult.jsx';\nimport HowToCalculate from '../components/HowToCalculate.jsx';\nimport Contact from '../components/Contact.jsx';\nimport { withRouter } from 'next/router';\nimport transEN from '../public/locales/en/en.js';\nimport transFR from '../public/locales/fr/fr.js';\nconst INITIAL_COURSES = [{\n  id: 1,\n  name: '',\n  credit: 0,\n  // weight(coeficient) of the course such as 3, 6..\n  markOver100: 0.0,\n  points: 0.0,\n  // example: 3.7, 4.0 ..\n  grade: '' // such as A, B..\n\n}, {\n  id: 2,\n  name: '',\n  credit: 0,\n  markOver100: 0.0,\n  points: 0.0,\n  grade: ''\n}, {\n  id: 3,\n  name: '',\n  credit: 0,\n  markOver100: 0.0,\n  points: 0.0,\n  grade: ''\n}];\nconst INITIAL_SEMESTER = {\n  courses: JSON.parse(JSON.stringify(INITIAL_COURSES)),\n  gpa: 0.0,\n  number: 1\n};\n\nclass GPACalculator extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleLanguageChange\", locale => {\n      this.t = locale === 'en' ? transEN : transFR;\n    });\n\n    _defineProperty(this, \"getPoints\", mark => {\n      mark = parseFloat(mark); // mark should never be > 100 nor < 0 nor invalid !\n\n      if (mark > 100) {\n        alert(\"Wrong input\");\n        return 0.0;\n      } else if (mark >= 80) return 4.00;else if (mark >= 75) return 3.70;else if (mark >= 70) return 3.30;else if (mark >= 65) return 3.00;else if (mark >= 60) return 2.70;else if (mark >= 55) return 2.30;else if (mark >= 50) return 2.00;else if (mark >= 45) return 1.70;else if (mark >= 40) return 1.30;else if (mark >= 35) return 1.00;else if (mark >= 30) return 0.00;else if (mark >= 0) return 0.00;else {\n        alert(\"Wrong input\");\n        return '-';\n      }\n    });\n\n    _defineProperty(this, \"getGrade\", mark => {\n      mark = parseFloat(mark);\n\n      if (mark > 100) {\n        alert(\"Wrong input\");\n        return '-';\n      } else if (mark >= 80) return 'A';else if (mark >= 75) return 'A-';else if (mark >= 70) return 'B+';else if (mark >= 65) return 'B';else if (mark >= 60) return 'B-';else if (mark >= 55) return 'C+';else if (mark >= 50) return 'C';else if (mark >= 45) return 'C-';else if (mark >= 40) return 'D+';else if (mark >= 35) return 'D';else if (mark >= 30) return 'E';else if (mark >= 0) return 'F';else {\n        alert(\"Wrong input\");\n        return '-';\n      }\n    });\n\n    _defineProperty(this, \"getTotalCredit\", semester => {\n      const courses = [...semester.courses];\n      var totalCredit = 0;\n\n      for (let course of courses) totalCredit += course.credit;\n\n      return totalCredit;\n    });\n\n    _defineProperty(this, \"calculateGPA\", semester => {\n      const courses = [...semester.courses];\n      var sum = 0.0;\n\n      for (let course of courses) {\n        sum += course.credit * course.points;\n      }\n\n      var totalCredit = this.getTotalCredit(semester);\n      if (totalCredit === 0) return 0.0; // to prevent zero division error\n\n      var gpa = sum / totalCredit;\n      if (isNaN(gpa)) return 0.0;\n      return parseFloat(gpa.toFixed(2)); // return gpa in 2 dps\n    });\n\n    _defineProperty(this, \"isInt\", val => /^\\d+$/.test(val));\n\n    _defineProperty(this, \"isReal\", val => !isNaN(val) && !isNaN(parseFloat(val)));\n\n    _defineProperty(this, \"hasMoreThanOneDecimalPoint\", val => {\n      var index = val.indexOf('.');\n\n      if (index !== -1) {\n        if (val.substring(index + 1).indexOf('.') === -1) {\n          // contains only one decimal point\n          return false;\n        } else {\n          // contains more than one decimal point\n          return true;\n        }\n      } else {\n        // contains no decimal point\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"handleInputChange\", (event, course, semester) => {\n      const {\n        name,\n        value\n      } = event.target;\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters));\n\n      var course = _objectSpread({}, course);\n\n      course[name] = value; // semester.courses.splice(course.id - 1, 1, course); or better still\n\n      semester.courses[course.id - 1] = course;\n      semesters[semester.number - 1] = semester;\n      this.setState({\n        semesters\n      });\n    });\n\n    _defineProperty(this, \"handleMarkOrCreditChange\", (event, course, semester) => {\n      const {\n        name\n      } = event.target;\n      var {\n        value\n      } = event.target; // console.log(name, value);\n\n      if (value === '') value = 0;\n\n      if (name === \"credit\") {\n        if (!this.isInt(value)) return;\n        value = parseInt(value, 10);\n        if (value < 0 || value > 10) return;\n      } else if (name === \"markOver100\") {\n        if (!this.isReal(value)) return;\n        if (typeof value === \"string\" && this.hasMoreThanOneDecimalPoint(value)) return; // parseFloat('9.') returns 9, same as parseFloat('9.0'); thus decimal point is lost.\n        // To prevent this, only perform validation if value doesn't end with decimal point nor 0\n        // If it ends with a decimal point, we'll just accept it\n\n        if (typeof value === \"string\" && !value.endsWith('.') && !value.endsWith('0')) value = parseFloat(value);\n        if (value < 0 || value > 100) return;\n      }\n\n      var course = _objectSpread({}, course);\n\n      if (course[name] === value) // do nothing if value hasn't changed\n        return;\n      course[name] = value;\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters));\n\n      if (name === \"markOver100\") {\n        course.grade = this.getGrade(course.markOver100);\n        course.points = this.getPoints(course.markOver100);\n      } // console.log(course);\n\n\n      semester.courses[course.id - 1] = course;\n      semester.gpa = this.calculateGPA(semester);\n      semesters[semester.number - 1] = semester;\n      this.setState({\n        semesters\n      });\n    });\n\n    _defineProperty(this, \"handleAddSemester\", () => {\n      // New semester's number is obtained by incrementing last semester's number\n      // which is equal to the number of semesters\n      const newSemesterNum = this.state.semesters.length + 1;\n      /*\n        semesters.push({\n          number: newSemesterNum,\n          gpa: 0.0,\n          courses: JSON.parse(JSON.stringify(INITIAL_COURSES))\n        });\n        this.setState({ semesters });\n      */\n\n      this.setState(prevState => ({\n        semesters: [...prevState.semesters, {\n          courses: JSON.parse(JSON.stringify(INITIAL_COURSES)),\n          gpa: 0.0,\n          number: newSemesterNum\n        }]\n      }));\n    });\n\n    _defineProperty(this, \"handleDeleteSemester\", semester => {\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters)); // We know that semesterIndex is always one shy of the semesterNum\n\n      const semesterNum = semester.number,\n            semesterIndex = semesterNum - 1;\n      semesters = semesters.filter(sem => sem.number !== semesterNum); // for every semester whose number is beyond the semesterNum, decrement its number\n\n      for (let i = semesterIndex; i < semesters.length; i++) semesters[i].number--; // semesters[i].number = semesters[i].number - 1;\n\n\n      this.setState({\n        semesters\n      });\n    });\n\n    _defineProperty(this, \"handleResetSemester\", semester => {\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters));\n      semester.courses = semester.courses.map(course => {\n        [course.name, course.credit, course.markOver100, course.points, course.grade] = ['', 0, 0.0, 0.0, ''];\n        return course;\n      });\n      semester.gpa = 0.0;\n      semesters[semester.number - 1] = semester;\n      this.setState({\n        semesters\n      });\n    });\n\n    _defineProperty(this, \"handleAddCourse\", semester => {\n      // var semesters = [...this.state.semesters];\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters));\n      const numCourses = semester.courses.length;\n      semester.courses.push({\n        // new course's id is obtained by incrementing last course's id (which is the number of courses)\n        id: numCourses + 1,\n        name: '',\n        credit: 0,\n        markOver100: 0.0,\n        grade: ''\n      });\n      semesters[semester.number - 1] = semester;\n      this.setState({\n        semesters\n      });\n    });\n\n    _defineProperty(this, \"handleDeleteCourse\", (course, semester) => {\n      var semesters = JSON.parse(JSON.stringify(this.state.semesters));\n      const courseIndex = course.id - 1; // var semesterCourses = semester.courses;\n      // Remove course from list of semester's courses\n\n      semester.courses = semester.courses.filter(semCourse => semCourse.id !== course.id); // Reallocate ids(every course which comes after the deleted course's number's id is decremented)\n\n      for (let i = courseIndex; i < semester.courses.length; i++) semester.courses[i].id--; // semester.courses[i].id = semester.courses[i].id - 1\n\n\n      semester.gpa = this.calculateGPA(semester);\n      semesters[semester.number - 1] = semester;\n      this.setState({\n        semesters\n      });\n    });\n\n    console.log(\"Semesters list rendered\");\n    this.state = {\n      semesters: [JSON.parse(JSON.stringify(INITIAL_SEMESTER))]\n    };\n    this.router = props.router;\n    const {\n      locale: _locale\n    } = props.router;\n    this.t = _locale === 'en' ? transEN : transFR;\n    this.locale = _locale;\n  }\n\n  componentDidMount() {\n    console.log(this.locale);\n    this.router.push('/', '/', {\n      locale: this.locale\n    });\n  }\n\n  render() {\n    // if(this.router !== null && this.router !== undefined)\n    //   this.router.push('/', '/', { locale: this.locale });\n    const {\n      semesters\n    } = this.state;\n    const numSemesters = semesters.length;\n    const gpas = semesters.map(semester => semester.gpa);\n    const t = this.t;\n    return (\n      /*#__PURE__*/\n      // <Suspense fallback={<Loader />}>\n      _jsxs(\"div\", {\n        id: \"app\",\n        children: [/*#__PURE__*/_jsx(LanguageSelector, {\n          t: t,\n          locale: this.locale,\n          router: this.router,\n          handleLanguageChange: this.handleLanguageChange\n        }), /*#__PURE__*/_jsx(\"br\", {}), \" \", /*#__PURE__*/_jsx(\"br\", {}), \" \", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Heading, {\n          t: t\n        }), /*#__PURE__*/_jsxs(\"main\", {\n          children: [/*#__PURE__*/_jsx(SemesterList, {\n            t: t,\n            semesters: semesters,\n            numSemesters: numSemesters,\n            onInputChange: this.handleInputChange,\n            onMarkOrCreditChange: this.handleMarkOrCreditChange,\n            onDeleteSemester: this.handleDeleteSemester,\n            onResetSemester: this.handleResetSemester,\n            onAddCourse: this.handleAddCourse,\n            onDeleteCourse: this.handleDeleteCourse\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              fontWeight: 'bolder',\n              fontStyle: 'italic',\n              float: 'right',\n              marginBottom: '1.6rem'\n            },\n            children: numSemesters === 1 ? 1 + ' ' + t('semester') : numSemesters + ' ' + t('semesters')\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n            color: \"primary\",\n            onClick: this.handleAddSemester,\n            startIcon: /*#__PURE__*/_jsx(AddCircleOutlineIcon, {}),\n            style: {\n              border: '2px solid rgba(144, 144, 144, 0.4)',\n              width: '100%',\n              justifyContent: 'left',\n              paddingLeft: '1rem'\n            },\n            children: t('Add a semester')\n          })]\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(FinalResult, {\n          t: t,\n          gpas: gpas,\n          semesters: semesters,\n          calculateGPA: this.calculateGPA\n        }), /*#__PURE__*/_jsx(\"br\", {}), \" \", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(HowToCalculate, {\n          t: t\n        }), /*#__PURE__*/_jsx(\"br\", {}), \" \", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Contact, {\n          t: t\n        })]\n      }) // </Suspense>\n\n    );\n  }\n\n}\n\nexport default withRouter(GPACalculator);","map":null,"metadata":{},"sourceType":"module"}