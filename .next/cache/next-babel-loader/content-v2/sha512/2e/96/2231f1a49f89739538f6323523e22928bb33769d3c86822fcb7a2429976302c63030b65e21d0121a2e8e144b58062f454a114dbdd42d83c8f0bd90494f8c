{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/home/sergeman/Desktop/mgp-calculator-nextjs/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/sergeman/Desktop/mgp-calculator-nextjs/components/Semester.jsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'; // import { useTranslation } from 'react-i18next';\n\nimport CourseInput from '../components/CourseInput.jsx';\nimport rc from '../components/Utils.jsx';\nexport default function Semester(props) {\n  _s();\n\n  var _this = this;\n\n  // const { t } = useTranslation();\n  var initialCourses = [{\n    id: '1',\n    name: '',\n    credit: '',\n    marksOver100: '',\n    grade: '-',\n    semesterNumber: props.number\n  }, {\n    id: '2',\n    name: '',\n    credit: '',\n    marksOver100: '',\n    grade: '-',\n    semesterNumber: props.number\n  }];\n\n  var _useState = useState({\n    number: props.number,\n    gpa: props.gpa,\n    courses: initialCourses\n  }),\n      semester = _useState[0],\n      setSemester = _useState[1];\n\n  console.log(\"Semester component rendered\");\n  /* Add a course \"form\" to enter course info in the semester */\n\n  var addCourseInputForm = function addCourseInputForm(semesterNum) {\n    var semesterConcerned = props.allSemesters.filter(function (semester) {\n      return semester.number === semesterNum;\n    })[0];\n    if (semesterConcerned === undefined) // if there are no semesters\n      return;\n    var courses = semesterConcerned.courses;\n    var numCourses = courses.length;\n    var newCourseId; // console.log(semesterConcerned.number === props.number); true\n\n    if (numCourses !== 0) {\n      // if semester already has a course\n      // get unused id by taking id of last course(max id in array) + 1\n      newCourseId = courses[numCourses - 1].id + 1;\n    } else newCourseId = 1; // setSemester({\n    //   ...semesterConcerned,\n    //   courses: [\n    //     ...courses, {\n    //     id: newCourseId,\n    //     name: '',\n    //     credit: '',\n    //     marksOver100: '',\n    //     grade: '-'\n    //     }\n    //   ]\n    // });\n\n  };\n\n  var removeCourse = function removeCourse(courseId, semesterNum) {\n    var semester = props.allSemesters.filter(function (semester) {\n      return semester.number === semesterNum;\n    })[0];\n    if (semester === undefined) // if there are no semesters\n      return;\n    var remainingCourses = semester.courses.filter(function (course) {\n      return course.id !== courseId;\n    });\n    setSemester(_objectSpread(_objectSpread({}, semester), {}, {\n      courses: remainingCourses\n    }));\n  };\n\n  var handleCourseInfoChange = function handleCourseInfoChange(modifiedCourse, courseSemester) {\n    // let semester = props.allSemesters.filter(semester => modifiedCourse.semesterNumber === props.number)[0];\n    // if (semester === undefined) // if there are no semesters\n    //     return;\n    // console.log(courseSemester === semester);  // true\n    // get all other courses other than the modified one\n    var unchangedCourses = semester.courses.filter(function (course) {\n      return course.id !== modifiedCourse.id;\n    }); // console.log(unchangedCourses.length);\n\n    console.log(unchangedCourses[0]); // now add modified course(new info) to courses\n\n    unchangedCourses.push(modifiedCourse);\n    var newCourses = unchangedCourses;\n\n    var obj = _objectSpread(_objectSpread({}, semester), {}, {\n      courses: newCourses\n    });\n\n    console.log(obj); // console.log(unchangedCourses);\n    // setSemester({\n    //   ...semester,\n    //   courses: newCourses\n    // });\n    // props.refreshSemesters(semester);\n    // console.log(semester);\n  }; // console.log(props.allSemesters);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"Semester \".concat(props.number, \" form\"),\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Course name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Credit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Marks /100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Grade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [semester.courses.map(function (course) {\n            return /*#__PURE__*/_jsxDEV(CourseInput, {\n              id: course.id,\n              name: course.name,\n              grade: course.grade,\n              marks: course.marksOver100,\n              credit: course.credit,\n              semesterNumber: course.semesterNumber,\n              semester: semester,\n              removeCourse: removeCourse(course.id),\n              handleCourseInfoChange: handleCourseInfoChange\n            }, course.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, _this);\n          }), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: function onClick() {\n              return addCourseInputForm(props.number);\n            },\n            children: \"Add course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"GPA: \", props.gpa]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Semester, \"UoWpPY2RjPiLWN6CEIuC2HsdF0c=\");\n\n_c = Semester;\n\nvar _c;\n\n$RefreshReg$(_c, \"Semester\");","map":{"version":3,"sources":["/home/sergeman/Desktop/mgp-calculator-nextjs/components/Semester.jsx"],"names":["useState","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TextField","Paper","Typography","CourseInput","rc","Semester","props","initialCourses","id","name","credit","marksOver100","grade","semesterNumber","number","gpa","courses","semester","setSemester","console","log","addCourseInputForm","semesterNum","semesterConcerned","allSemesters","filter","undefined","numCourses","length","newCourseId","removeCourse","courseId","remainingCourses","course","handleCourseInfoChange","modifiedCourse","courseSemester","unchangedCourses","push","newCourses","obj","map"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n// import { useTranslation } from 'react-i18next';\nimport CourseInput from '../components/CourseInput.jsx';\nimport rc from '../components/Utils.jsx';\n\nexport default function Semester(props) {\n    // const { t } = useTranslation();\n    const initialCourses = [{\n      id: '1',\n      name: '',\n      credit: '',\n      marksOver100: '',\n      grade: '-',\n      semesterNumber: props.number\n    }, {\n      id: '2',\n      name: '',\n      credit: '',\n      marksOver100: '',\n      grade: '-',\n      semesterNumber: props.number\n    }];\n    const [semester, setSemester] = useState(\n      {\n        number: props.number,\n        gpa: props.gpa,\n        courses: initialCourses\n      }\n    );\n    console.log(\"Semester component rendered\");\n    /* Add a course \"form\" to enter course info in the semester */\n    const addCourseInputForm = (semesterNum) => {\n      let semesterConcerned = (props.allSemesters.filter(semester => semester.number === semesterNum))[0];\n      if (semesterConcerned === undefined) // if there are no semesters\n          return;\n      let courses = semesterConcerned.courses;\n      let numCourses = courses.length;\n      let newCourseId;\n      // console.log(semesterConcerned.number === props.number); true\n\n      if (numCourses !== 0) {   // if semester already has a course\n          // get unused id by taking id of last course(max id in array) + 1\n          newCourseId = courses[numCourses-1].id + 1;\n      }\n      else\n          newCourseId = 1;\n\n      // setSemester({\n      //   ...semesterConcerned,\n      //   courses: [\n      //     ...courses, {\n      //     id: newCourseId,\n      //     name: '',\n      //     credit: '',\n      //     marksOver100: '',\n      //     grade: '-'\n      //     }\n      //   ]\n      // });\n    }\n\n    const removeCourse = (courseId, semesterNum) => {\n      let semester = props.allSemesters.filter(semester => semester.number === semesterNum)[0];\n      if (semester === undefined) // if there are no semesters\n          return;\n      const remainingCourses = semester.courses.filter(course => course.id !== courseId);\n      setSemester({\n        ...semester,\n        courses: remainingCourses\n      });\n    }\n\n    const handleCourseInfoChange = (modifiedCourse, courseSemester) => {\n      // let semester = props.allSemesters.filter(semester => modifiedCourse.semesterNumber === props.number)[0];\n      // if (semester === undefined) // if there are no semesters\n      //     return;\n      // console.log(courseSemester === semester);  // true\n\n      // get all other courses other than the modified one\n      const unchangedCourses = semester.courses.filter(course => course.id !== modifiedCourse.id);\n      // console.log(unchangedCourses.length);\n      console.log(unchangedCourses[0]);\n      // now add modified course(new info) to courses\n      unchangedCourses.push(modifiedCourse);\n      const newCourses = unchangedCourses;\n      var obj = {\n        ...semester,\n        courses: newCourses\n      }\n      console.log(obj);\n      // console.log(unchangedCourses);\n      // setSemester({\n      //   ...semester,\n      //   courses: newCourses\n      // });\n      // props.refreshSemesters(semester);\n      // console.log(semester);\n    }\n\n    // console.log(props.allSemesters);\n\n    return (\n      <>\n\n          <TableContainer component={Paper}>\n              {//<Table aria-label={`Semester ${props.number} form`}>\n              }\n              <Table aria-label={`Semester ${props.number} form`}>\n                  <TableHead>\n                      <TableRow>\n                          <TableCell>Course name</TableCell>\n                          <TableCell>Credit</TableCell>\n                          <TableCell>Marks /100</TableCell>\n                          <TableCell>Grade</TableCell>\n                      </TableRow>\n                  </TableHead>\n\n                  <TableBody>\n                      {semester.courses.map(\n                          course => (\n                            <CourseInput\n                              key={course.id}\n                              id={course.id}\n                              name={course.name}\n                              grade={course.grade}\n                              marks={course.marksOver100}\n                              credit={course.credit}\n                              semesterNumber={course.semesterNumber}\n                              semester={semester}\n                              removeCourse={removeCourse(course.id)}\n                              handleCourseInfoChange={handleCourseInfoChange}\n                            />\n                          )\n                      )}\n                      <button onClick={() => addCourseInputForm(props.number)}>Add course</button>\n                  </TableBody>\n              </Table>\n          </TableContainer>\n          <span>GPA: {props.gpa}</span>\n      </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}